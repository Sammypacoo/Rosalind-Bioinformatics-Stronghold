# -*- coding: utf-8 -*-
"""Finding a Protein Motif

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wFbCqts3hj6hxEkg3fTuJQpbLNZVoXb_
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import urllib.request

with open("/content/drive/MyDrive/Colab Notebooks/Rosalind/Bioinformatics Stronghold/Finding a Protein Motif /teste1.txt") as f:
        contents = f.read()

contents

lines=contents.split("\n")

lines

# Verificar se tem _ nos itens da lista
lines1=[]
for x in range  (len(lines)):
  item=lines[x]
  item=item.split("_")
  item=item[0]
  print(item)
  lines1+=[item]
print(lines1)

# Agora fazer a função paraa a criação de dic com a sequência 
def find_seq (lines,lines1):
  dic={}
  for j in range (len(lines1)):
    # pegar seq no site
    ptn=lines1[j]
    ptn1=lines[j]
    req = "http://www.uniprot.org/uniprot/{}.fasta".format(ptn)
    with urllib.request.urlopen(req) as f:
            response = f.read()
    # Converter bytes para string
    s=str(response,'utf-8')
    # Separar as linhas da string
    s1=s.split("\n")
    s2=""
    for j1 in range (1,len(s1)-1):
      item1=s1[j1]
      s2=s2+item1
    #print(s2)
    dic[ptn1]=s2
  return dic

dic=find_seq(lines,lines1)
dic

'''
Código para pegar os padrões, como dentro de um padrão iniciando dentro de outro padrão
 eu coloquei para quebrar a seq na próximo aa que aparecer depois do primeiro aa do pradrão reconhecido 
 isso permite que o esses padrões que se inciam dentro de um outro padrão possam ser reconheidos e anotados pelo
 código abaixo
'''
dic2={}
for chave in dic:
  #print(chave)
  bol=True
  count=0
  resul=[]
  seq=dic[chave]
  x1=re.search("N[^P][ST][^P]", seq)
  if x1 !=None:
    start=x1.start()  
    count=start+1
    #print(f'count {count}')
    #print("--")     
    resul.append(start+1)
    start2=start
    while  bol==True:
      seq=seq[start2+1:]
      #print(seq)
      x2=re.search("N[^P][ST][^P]", seq)    
      if x2 !=None:
          start2=x2.start()
          #print(f'start2 {start2}')
          valor=start2+count+1
          #print(f'valor {valor}')             
          end= x2.end()
          count+=start2+1        
          #print(f'count {count}')
          #print("-")
          #print("--")
          resul.append(valor)
      else:
        bol=False

    dic2[chave]=resul

dic2

'''
Esse é para formatar o dicionário com o output solicitado pela Rosalind
'''
for chave in dic2:
  lista=dic2[chave]
  t=""
  for i in range (len(lista)):
    item=lista[i]
    item=str(item)
    espaço=" "
    t=t+item+espaço
  print(chave)
  print(t)